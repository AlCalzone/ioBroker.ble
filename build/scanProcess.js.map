{
  "version": 3,
  "sources": ["../src/scanProcess.ts"],
  "sourcesContent": ["/** noble-Treiber-Instanz */\nimport type { Peripheral } from \"@abandonware/noble\";\nimport * as yargs from \"yargs\";\nimport { pick } from \"./lib/misc\";\nimport {\n\tPeripheralInfo,\n\tScanExitCodes,\n\tScanMessage,\n} from \"./lib/scanProcessInterface\";\n\n/** Define command line arguments */\nconst argv = yargs\n\t.env(\"IOB_BLE\")\n\t.strict()\n\t.usage(\"ioBroker.ble scanner process\\n\\nUsage: $0 [options]\")\n\t.options({\n\t\thciDevice: {\n\t\t\talias: \"-d\",\n\t\t\ttype: \"number\",\n\t\t\tdesc: \"Index of the HCI device to use for scanning\",\n\t\t\tdefault: 0,\n\t\t},\n\t\tservices: {\n\t\t\talias: \"-s\",\n\t\t\ttype: \"array\",\n\t\t\tdesc: \"Which BLE services to scan for\",\n\t\t\tdefault: [],\n\t\t},\n\t})\n\t.parseSync();\n\nlet noble: typeof import(\"@abandonware/noble\");\n\nfunction sendAsync(\n\tmessage: ScanMessage,\n\tsendHandle?: any,\n\tswallowErrors: boolean = true,\n): Promise<void> {\n\treturn new Promise((resolve, reject) => {\n\t\tprocess.send!(message, sendHandle, undefined, (err) => {\n\t\t\tif (err && !swallowErrors) reject(err);\n\t\t\telse resolve();\n\t\t});\n\t});\n}\n\n// @ts-expect-error We need this to serialize and deserialize Error objects\nError.prototype.toJSON = function (this: Error) {\n\tconst ret: Record<string, any> = {\n\t\ttype: \"Error\",\n\t\tname: this.name,\n\t\tmessage: this.message,\n\t\tstack: this.stack,\n\t};\n\t// Add any custom properties such as .code in file-system errors\n\tfor (const key of Object.keys(this) as (keyof Error)[]) {\n\t\tif (!ret[key]) {\n\t\t\tret[key] = this[key];\n\t\t}\n\t}\n\treturn ret;\n};\n\nprocess.on(\"uncaughtException\", (error) => {\n\t// Delegate the error to the parent process and let it decide whether to shut down the scanning process\n\tsendAsync({ type: \"error\", error });\n});\nprocess.on(\"unhandledRejection\", (error) => {\n\t// Delegate the error to the parent process and let it decide whether to shut down the scanning process\n\tsendAsync({\n\t\ttype: \"error\",\n\t\terror:\n\t\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\t\terror instanceof Error ? error : new Error(`${error}`),\n\t});\n});\n\nfunction serializePeripheral(peripheral: Peripheral): PeripheralInfo {\n\treturn pick(peripheral, [\n\t\t\"id\",\n\t\t\"uuid\",\n\t\t\"address\",\n\t\t\"addressType\",\n\t\t\"connectable\",\n\t\t\"advertisement\",\n\t\t\"rssi\",\n\t\t\"services\",\n\t\t\"state\",\n\t]);\n}\n\nfunction onDiscover(peripheral?: Peripheral) {\n\tif (peripheral == undefined) return;\n\tsendAsync({\n\t\ttype: \"discover\",\n\t\tperipheral: serializePeripheral(peripheral),\n\t});\n}\n\nlet isScanning = false;\nasync function startScanning() {\n\tif (isScanning) return;\n\tawait sendAsync({ type: \"connected\" });\n\tawait sendAsync({\n\t\ttype: \"log\",\n\t\tmessage: `starting scan for services ${JSON.stringify(argv.services)}`,\n\t});\n\t// We must allow duplicates in order to support\n\tnoble.on(\"discover\", onDiscover);\n\tawait noble.startScanningAsync(argv.services, true);\n\tisScanning = true;\n}\n\nasync function stopScanning() {\n\tif (!isScanning) return;\n\tnoble.removeAllListeners(\"discover\");\n\tsendAsync({\n\t\ttype: \"log\",\n\t\tmessage: `stopping scan`,\n\t});\n\tnoble.stopScanning();\n\tsendAsync({ type: \"disconnected\" });\n\tisScanning = false;\n}\n\n(async () => {\n\t// load noble driver with the correct device selected\n\tprocess.env.NOBLE_HCI_DEVICE_ID = argv.hciDevice.toString();\n\ttry {\n\t\t// eslint-disable-next-line @typescript-eslint/no-var-requires\n\t\tnoble = require(\"@abandonware/noble\");\n\t\tif (typeof noble.on !== \"function\") {\n\t\t\t// The following commit broke the default exported instance of noble:\n\t\t\t// https://github.com/abandonware/noble/commit/b67eea246f719947fc45b1b52b856e61637a8a8e\n\t\t\tnoble = (noble as any)({ extended: false });\n\t\t}\n\t} catch (error: any) {\n\t\tawait sendAsync({ type: \"fatal\", error });\n\t\tprocess.exit(ScanExitCodes.RequireNobleFailed);\n\t}\n\n\t// prepare scanning for beacons\n\tnoble.on(\"stateChange\", (state) => {\n\t\tswitch (state) {\n\t\t\tcase \"poweredOn\":\n\t\t\t\tstartScanning();\n\t\t\t\tbreak;\n\t\t\tcase \"poweredOff\":\n\t\t\t\tstopScanning();\n\t\t\t\tbreak;\n\t\t}\n\t\tsendAsync({ type: \"driverState\", driverState: state });\n\t});\n\tif (noble.state === \"poweredOn\") startScanning();\n\tsendAsync({ type: \"driverState\", driverState: noble.state });\n})();\n"],
  "mappings": "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",
  "names": []
}
