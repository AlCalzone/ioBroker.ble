{
  "version": 3,
  "sources": ["../src/scanProcess.ts"],
  "sourcesContent": ["/** noble-Treiber-Instanz */\nimport type { Peripheral } from \"@abandonware/noble\";\nimport { createServer, type AddressInfo, type Server, type Socket } from \"net\";\nimport { pick } from \"./lib/misc\";\nimport {\n\tScanExitCodes,\n\ttype InboundMessage,\n\ttype PeripheralInfo,\n\ttype ScanMessage,\n} from \"./lib/scanProcessInterface\";\nimport yargs = require(\"yargs\");\n\n/** Define command line arguments */\nconst argv = yargs\n\t.env(\"IOB_BLE\")\n\t.strict()\n\t.usage(\"ioBroker.ble scanner process\\n\\nUsage: $0 [options]\")\n\t.options({\n\t\thciDevice: {\n\t\t\talias: \"-d\",\n\t\t\ttype: \"number\",\n\t\t\tdesc: \"Index of the HCI device to use for scanning\",\n\t\t\tdefault: 0,\n\t\t},\n\t\tservices: {\n\t\t\talias: \"-s\",\n\t\t\ttype: \"array\",\n\t\t\tdesc: \"Which BLE services to scan for\",\n\t\t\tdefault: [],\n\t\t},\n\t\tlistenInterface: {\n\t\t\talias: \"-i\",\n\t\t\ttype: \"string\",\n\t\t\tdesc: \"If not spawned as a child process, the interface to listen for TCP connections. Default: all interfaces.\",\n\t\t},\n\t\tlistenPort: {\n\t\t\talias: \"-p\",\n\t\t\ttype: \"number\",\n\t\t\tdesc: \"If not spawned as a child process, the port to listen on.\",\n\t\t\tdefault: 8734,\n\t\t},\n\t})\n\t.parseSync();\n\nlet noble: typeof import(\"@abandonware/noble\");\nlet server: Server | undefined;\nconst clients: Set<Socket> = new Set();\n\nfunction sendAsync(\n\tmessage: ScanMessage,\n\tsendHandle?: any,\n\tswallowErrors: boolean = true,\n): Promise<void> {\n\tif (process.send) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tprocess.send!(message, sendHandle, undefined, (err) => {\n\t\t\t\tif (err && !swallowErrors) reject(err);\n\t\t\t\telse resolve();\n\t\t\t});\n\t\t});\n\t} else {\n\t\tconst promises = [...clients].map((client) => {\n\t\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\t\tclient.write(JSON.stringify(message) + \"\\n\", (err) => {\n\t\t\t\t\tif (err && !swallowErrors) reject(err);\n\t\t\t\t\telse resolve();\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\treturn Promise.all(promises).then(() => undefined);\n\t}\n}\n\n// @ts-expect-error We need this to serialize and deserialize Error objects\nError.prototype.toJSON = function (this: Error) {\n\tconst ret: Record<string, any> = {\n\t\ttype: \"Error\",\n\t\tname: this.name,\n\t\tmessage: this.message,\n\t\tstack: this.stack,\n\t};\n\t// Add any custom properties such as .code in file-system errors\n\tfor (const key of Object.keys(this) as (keyof Error)[]) {\n\t\tif (!ret[key]) {\n\t\t\tret[key] = this[key];\n\t\t}\n\t}\n\treturn ret;\n};\n\nprocess.on(\"uncaughtException\", (error) => {\n\t// Delegate the error to the parent process and let it decide whether to shut down the scanning process\n\tsendAsync({ type: \"error\", error });\n});\nprocess.on(\"unhandledRejection\", (error) => {\n\t// Delegate the error to the parent process and let it decide whether to shut down the scanning process\n\tsendAsync({\n\t\ttype: \"error\",\n\t\terror:\n\t\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\t\terror instanceof Error ? error : new Error(`${error}`),\n\t});\n});\n\n// This will be called when an IPC channel exists\nprocess.on(\"message\", (msg) => {\n\thandleMessage(msg as InboundMessage);\n});\n\nfunction handleMessage(msg: InboundMessage) {\n\tswitch (msg.type) {\n\t\tcase \"startScanning\":\n\t\t\tstartScanning();\n\t\t\tbreak;\n\t\tcase \"stopScanning\":\n\t\t\tstopScanning();\n\t\t\tbreak;\n\t}\n}\n\nfunction serializePeripheral(peripheral: Peripheral): PeripheralInfo {\n\treturn pick(peripheral, [\n\t\t\"id\",\n\t\t\"uuid\",\n\t\t\"address\",\n\t\t\"addressType\",\n\t\t\"connectable\",\n\t\t\"advertisement\",\n\t\t\"rssi\",\n\t\t\"services\",\n\t\t\"state\",\n\t]);\n}\n\nfunction onDiscover(peripheral?: Peripheral) {\n\tif (peripheral == undefined) return;\n\tsendAsync({\n\t\ttype: \"discover\",\n\t\tperipheral: serializePeripheral(peripheral),\n\t});\n}\n\nlet isScanning = false;\nasync function startScanning() {\n\tif (isScanning) return;\n\tawait sendAsync({ type: \"connected\" });\n\tawait sendAsync({\n\t\ttype: \"log\",\n\t\tmessage: `starting scan for services ${JSON.stringify(argv.services)}`,\n\t});\n\t// We must allow duplicates in order to support\n\tnoble.on(\"discover\", onDiscover);\n\tawait noble.startScanningAsync(argv.services, true);\n\tisScanning = true;\n}\n\nasync function stopScanning() {\n\tif (!isScanning) return;\n\tnoble.removeAllListeners(\"discover\");\n\tsendAsync({\n\t\ttype: \"log\",\n\t\tmessage: `stopping scan`,\n\t});\n\tnoble.stopScanning();\n\tsendAsync({ type: \"disconnected\" });\n\tisScanning = false;\n}\n\nfunction maybeStartServer(): Promise<void> {\n\t// This is a child process, we have an IPC channel\n\tif (process.send) return Promise.resolve();\n\n\treturn new Promise((resolve, reject) => {\n\t\t// Start a TCP server, listen for connections, and forward them to the serial port\n\t\tserver = createServer((socket) => {\n\t\t\tconsole.log(\"Client connected\");\n\t\t\tclients.add(socket);\n\n\t\t\t// when the connection is closed, unpipe the streams\n\t\t\tsocket.on(\"close\", () => {\n\t\t\t\tconsole.log(\"Client disconnected\");\n\t\t\t\tclients.delete(socket);\n\t\t\t});\n\t\t});\n\n\t\t// Do not allow more than one client to connect\n\t\tserver.maxConnections = 1;\n\n\t\tserver.on(\"error\", (err) => {\n\t\t\tif ((err as any).code === \"EADDRINUSE\") {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t\tserver.listen(\n\t\t\t{\n\t\t\t\thost: argv.listenInterface,\n\t\t\t\tport: argv.listenPort,\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tconst address: AddressInfo = server!.address() as any;\n\t\t\t\tconsole.log(\n\t\t\t\t\t`Server listening on tcp://${address.address}:${address.port}`,\n\t\t\t\t);\n\t\t\t\tresolve();\n\t\t\t},\n\t\t);\n\t});\n}\n\nasync function loadNoble() {\n\t// load noble driver with the correct device selected\n\tprocess.env.NOBLE_HCI_DEVICE_ID = argv.hciDevice.toString();\n\ttry {\n\t\t// eslint-disable-next-line @typescript-eslint/no-var-requires\n\t\tnoble = require(\"@abandonware/noble\");\n\t\tif (typeof noble.on !== \"function\") {\n\t\t\t// The following commit broke the default exported instance of noble:\n\t\t\t// https://github.com/abandonware/noble/commit/b67eea246f719947fc45b1b52b856e61637a8a8e\n\t\t\tnoble = (noble as any)({ extended: false });\n\t\t}\n\t} catch (error: any) {\n\t\tawait sendAsync({ type: \"fatal\", error });\n\t\tprocess.exit(ScanExitCodes.RequireNobleFailed);\n\t}\n}\n\nasync function main() {\n\t// prepare scanning for beacons\n\tnoble.on(\"stateChange\", (state) => {\n\t\tswitch (state) {\n\t\t\tcase \"poweredOn\":\n\t\t\t\tstartScanning();\n\t\t\t\tbreak;\n\t\t\tcase \"poweredOff\":\n\t\t\t\tstopScanning();\n\t\t\t\tbreak;\n\t\t}\n\t\tconsole.log(`driver state is ${state}`);\n\t\tsendAsync({ type: \"driverState\", driverState: state });\n\t});\n\tif (noble.state === \"poweredOn\") startScanning();\n\tsendAsync({ type: \"driverState\", driverState: noble.state });\n}\n\n(async () => {\n\tawait loadNoble();\n\tawait maybeStartServer();\n\tif (server) {\n\t\t// wait for connection\n\t\tserver.once(\"connection\", () => {\n\t\t\tmain();\n\t\t});\n\t} else {\n\t\t// child process, start scanning immediately\n\t\tmain();\n\t}\n})();\n"],
  "mappings": "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",
  "names": []
}
