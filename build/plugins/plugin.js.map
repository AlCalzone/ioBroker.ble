{
  "version": 3,
  "sources": ["../../src/plugins/plugin.ts"],
  "sourcesContent": ["\uFEFFimport type { PeripheralInfo } from \"../lib/scanProcessInterface\";\n\nexport type DeviceObjectDefinition = Partial<\n\tPick<ioBroker.DeviceObject, \"common\" | \"native\">\n>;\nexport type ChannelObjectDefinition = Partial<\n\tPick<ioBroker.ChannelObject, \"common\" | \"native\">\n> & { id: string };\nexport type StateObjectDefinition = Partial<\n\tPick<ioBroker.StateObject, \"common\" | \"native\">\n> & { id: string };\n\n/**\n * Defines the object structure for a handled peripheral.\n * RSSI is created by default\n */\nexport interface PeripheralObjectStructure {\n\t/**\n\t * How the device object should look like.\n\t */\n\tdevice: DeviceObjectDefinition;\n\t/**\n\t * Which channels to create.\n\t * May be undefined if the plugin knows that the objects exist or none should be created.\n\t */\n\tchannels: ChannelObjectDefinition[] | undefined;\n\t/**\n\t * Which states to create.\n\t */\n\tstates: StateObjectDefinition[];\n}\n\n/** Defines the interface a plugin has to expose */\nexport interface Plugin<TContext = any> {\n\t/** Name of the plugin */\n\tname: string;\n\t/** Description of the plugin */\n\tdescription: string;\n\t/** A list of services to include in the scan */\n\tadvertisedServices: string[];\n\n\t/** Determines whether this plugin is handling a peripheral or not */\n\tisHandling: (peripheral: PeripheralInfo) => boolean;\n\t/** Creates an object used by @see{defineObjects} and @see{getValues} to create their return values */\n\tcreateContext: (peripheral: PeripheralInfo) => TContext | undefined;\n\t/** Defines the object structure for a handled peripheral. */\n\tdefineObjects: (context: TContext) => PeripheralObjectStructure | undefined;\n\t/** Returns the values extracted from the peripheral */\n\tgetValues: (context: TContext) => Record<string, any> | undefined;\n}\n\nexport function getServiceData(\n\tperipheral: PeripheralInfo,\n\tuuid: string,\n): Buffer | undefined {\n\tfor (const entry of peripheral.advertisement!.serviceData!) {\n\t\tif (entry.uuid === uuid) return entry.data;\n\t}\n}\n\n/** Aliases an existing plugin with a new name */\nexport function alias(newName: string, oldPlugin: Plugin): Plugin {\n\tconst { name, ...plugin } = oldPlugin;\n\treturn {\n\t\tname: newName,\n\t\t...plugin,\n\t};\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmDO,wBACN,YACA,MACqB;AACrB,aAAW,SAAS,WAAW,cAAe,aAAc;AAC3D,QAAI,MAAM,SAAS;AAAM,aAAO,MAAM;AAAA,EACvC;AACD;AAGO,eAAe,SAAiB,WAA2B;AACjE,QAA4B,gBAApB,WAAoB,IAAX,mBAAW,IAAX,CAAT;AACR,SAAO;AAAA,IACN,MAAM;AAAA,KACH;AAEL;",
  "names": []
}
