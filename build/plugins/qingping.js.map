{
  "version": 3,
  "sources": ["../../src/plugins/qingping.ts"],
  "sourcesContent": ["\uFEFFimport {\n\tQingpingAdvertisement,\n\ttype QingpingEvent,\n} from \"./lib/qingping_protocol\";\nimport { Global as _ } from \"../lib/global\";\nimport type { PeripheralInfo } from \"../lib/scanProcessInterface\";\nimport {\n\tgetServiceData,\n\ttype ChannelObjectDefinition,\n\ttype DeviceObjectDefinition,\n\ttype PeripheralObjectStructure,\n\ttype Plugin,\n\ttype StateObjectDefinition,\n} from \"./plugin\";\n\ninterface QingpingContext {\n\tevent?: QingpingEvent;\n}\n\nfunction parseData(raw: Buffer): string | number {\n\tif (raw.length === 1) {\n\t\t// single byte\n\t\treturn raw[0];\n\t} else {\n\t\t// Output hex value\n\t\treturn raw.toString(\"hex\");\n\t}\n}\n\nfunction parseAdvertisementEvent(data: Buffer): QingpingEvent | undefined {\n\t// try to parse the data\n\tlet advertisement: QingpingAdvertisement;\n\ttry {\n\t\tadvertisement = new QingpingAdvertisement(data);\n\t} catch (e) {\n\t\t_.adapter.log.debug(`qingping >> failed to parse data`);\n\t\treturn;\n\t}\n\n\treturn advertisement.event;\n}\n\n// remember tested peripherals by their MAC address for 1h\nconst testValidity = 1000 * 3600;\nconst testedPeripherals = new Map<\n\tstring,\n\t{ timestamp: number; result: boolean }\n>();\n\nconst plugin: Plugin<QingpingContext> = {\n\tname: \"Qingping\",\n\tdescription: \"Handles Qingping temperature and humidity sensors\",\n\n\t// Just handle all services we receive already\n\tadvertisedServices: [],\n\tisHandling: (p) => {\n\t\tif (\n\t\t\t!p.advertisement ||\n\t\t\t!p.advertisement.serviceData ||\n\t\t\t!p.advertisement.serviceData.some((entry) => entry.uuid === \"fdcd\")\n\t\t)\n\t\t\treturn false;\n\t\tconst mac = p.address.toLowerCase();\n\t\tconst cached = testedPeripherals.get(mac);\n\t\tif (cached && cached.timestamp >= Date.now() - testValidity) {\n\t\t\t// we have a recent test result, return it\n\t\t\treturn cached.result;\n\t\t}\n\t\t// Try to parse advertisement data as a XiaomiEvent to see if this\n\t\t// is for us\n\t\tlet ret = false;\n\t\tconst data = getServiceData(p, \"fdcd\");\n\t\tif (data != undefined) {\n\t\t\tconst event = parseAdvertisementEvent(data);\n\t\t\tret = event != undefined;\n\t\t}\n\t\t// store the test result\n\t\ttestedPeripherals.set(mac, {\n\t\t\ttimestamp: Date.now(),\n\t\t\tresult: ret,\n\t\t});\n\t\treturn ret;\n\t},\n\n\t// No special context necessary. Return the peripheral, so it gets passed to the other methods.\n\tcreateContext: (peripheral: PeripheralInfo) => {\n\t\tconst data = getServiceData(peripheral, \"fdcd\");\n\t\tif (data == undefined) return;\n\n\t\t_.adapter.log.debug(`qingping >> got data: ${data.toString(\"hex\")}`);\n\n\t\tconst event = parseAdvertisementEvent(data);\n\t\tif (event == undefined) return;\n\n\t\treturn { event };\n\t},\n\n\tdefineObjects: (context: QingpingContext) => {\n\t\tif (context == undefined || context.event == undefined) return;\n\n\t\tconst deviceObject: DeviceObjectDefinition = {\n\t\t\t// no special definitions neccessary\n\t\t\tcommon: undefined,\n\t\t\tnative: undefined,\n\t\t};\n\n\t\t// no channels\n\n\t\tconst stateObjects: StateObjectDefinition[] = [];\n\n\t\tconst ret = {\n\t\t\tdevice: deviceObject,\n\t\t\tchannels: undefined,\n\t\t\tstates: stateObjects,\n\t\t};\n\n\t\tconst event = context.event;\n\t\tif (\"temperature\" in event) {\n\t\t\tstateObjects.push({\n\t\t\t\tid: \"temperature\",\n\t\t\t\tcommon: {\n\t\t\t\t\trole: \"value\",\n\t\t\t\t\tname: \"Temperature\",\n\t\t\t\t\ttype: \"number\",\n\t\t\t\t\tunit: \"\u00B0C\",\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: false,\n\t\t\t\t},\n\t\t\t\tnative: undefined,\n\t\t\t});\n\t\t}\n\t\tif (\"humidity\" in event) {\n\t\t\tstateObjects.push({\n\t\t\t\tid: \"humidity\",\n\t\t\t\tcommon: {\n\t\t\t\t\trole: \"value\",\n\t\t\t\t\tname: \"Relative Humidity\",\n\t\t\t\t\ttype: \"number\",\n\t\t\t\t\tunit: \"%rF\",\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: false,\n\t\t\t\t},\n\t\t\t\tnative: undefined,\n\t\t\t});\n\t\t}\n\t\tif (\"battery\" in event) {\n\t\t\tstateObjects.push({\n\t\t\t\tid: \"battery\",\n\t\t\t\tcommon: {\n\t\t\t\t\trole: \"value\",\n\t\t\t\t\tname: \"Battery\",\n\t\t\t\t\tdesc: \"Battery status of the sensor\",\n\t\t\t\t\ttype: \"number\",\n\t\t\t\t\tunit: \"%\",\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: false,\n\t\t\t\t},\n\t\t\t\tnative: undefined,\n\t\t\t});\n\t\t}\n\t\treturn ret;\n\t},\n\n\tgetValues: (context: QingpingContext) => {\n\t\tif (context == null || context.event == null) return;\n\n\t\t// The event is simply the value dictionary itself\n\t\treturn context.event;\n\t},\n};\n\nexport = plugin;\n"],
  "mappings": "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",
  "names": ["_"]
}
