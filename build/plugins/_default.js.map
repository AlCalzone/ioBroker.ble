{
  "version": 3,
  "sources": ["../../src/plugins/_default.ts"],
  "sourcesContent": ["\uFEFFimport { Global as _ } from \"../lib/global\";\nimport type { PeripheralInfo } from \"../lib/scanProcessInterface\";\nimport type {\n\tChannelObjectDefinition,\n\tDeviceObjectDefinition,\n\tPeripheralObjectStructure,\n\tPlugin,\n\tStateObjectDefinition,\n} from \"./plugin\";\n\nfunction parseData(raw: Buffer): string | number {\n\tif (raw.length === 1) {\n\t\t// single byte\n\t\treturn raw[0];\n\t} else {\n\t\t// Output hex value\n\t\treturn raw.toString(\"hex\");\n\t}\n}\n\nconst plugin: Plugin = {\n\tname: \"_default\",\n\tdescription:\n\t\t\"Handles all peripherals that are not handled by other plugins\",\n\n\t// Just handle all services we receive already\n\tadvertisedServices: [],\n\tisHandling: (_p) => true,\n\n\t// No special context necessary. Return the peripheral, so it gets passed to the other methods.\n\tcreateContext: (peripheral: PeripheralInfo) => peripheral,\n\n\tdefineObjects: (peripheral: PeripheralInfo): PeripheralObjectStructure => {\n\t\tconst deviceObject: DeviceObjectDefinition = {\n\t\t\t// no special definitions neccessary\n\t\t\tcommon: undefined,\n\t\t\tnative: undefined,\n\t\t};\n\n\t\tconst channelId = `services`;\n\t\tconst channelObject: ChannelObjectDefinition = {\n\t\t\tid: channelId,\n\t\t\tcommon: {\n\t\t\t\t// common\n\t\t\t\tname: \"Advertised services\",\n\t\t\t\trole: \"info\",\n\t\t\t},\n\t\t\tnative: undefined,\n\t\t};\n\n\t\tconst stateObjects: StateObjectDefinition[] = [];\n\t\tif (peripheral.advertisement && peripheral.advertisement.serviceData) {\n\t\t\tfor (const entry of peripheral.advertisement.serviceData) {\n\t\t\t\tconst uuid = entry.uuid;\n\t\t\t\tconst stateId = `${channelId}.${uuid}`;\n\n\t\t\t\tstateObjects.push({\n\t\t\t\t\tid: stateId,\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\trole: \"value\",\n\t\t\t\t\t\tname: \"Advertised service \" + uuid, // TODO: create readable names\n\t\t\t\t\t\tdesc: \"\",\n\t\t\t\t\t\ttype: \"mixed\",\n\t\t\t\t\t\tread: true,\n\t\t\t\t\t\twrite: false,\n\t\t\t\t\t},\n\t\t\t\t\tnative: undefined,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\tperipheral.advertisement &&\n\t\t\tperipheral.advertisement.manufacturerData &&\n\t\t\tperipheral.advertisement.manufacturerData.length > 0\n\t\t) {\n\t\t\tstateObjects.push({\n\t\t\t\tid: `${channelId}.manufacturerData`,\n\t\t\t\tcommon: {\n\t\t\t\t\trole: \"value\",\n\t\t\t\t\tname: \"Manufacturer Data\",\n\t\t\t\t\tdesc: \"\",\n\t\t\t\t\ttype: \"mixed\",\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: false,\n\t\t\t\t},\n\t\t\t\tnative: undefined,\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\tdevice: deviceObject,\n\t\t\tchannels: [channelObject],\n\t\t\tstates: stateObjects,\n\t\t};\n\t},\n\n\tgetValues: (peripheral: PeripheralInfo) => {\n\t\tconst ret: Record<string, any> = {};\n\t\tif (peripheral.advertisement && peripheral.advertisement.serviceData) {\n\t\t\tfor (const entry of peripheral.advertisement.serviceData) {\n\t\t\t\tconst uuid = entry.uuid;\n\t\t\t\tconst stateId = `services.${uuid}`;\n\t\t\t\t// remember the transmitted data\n\t\t\t\tret[stateId] = parseData(entry.data);\n\t\t\t\t_.adapter.log.debug(\n\t\t\t\t\t`_default: ${peripheral.address} > got data ${ret[stateId]} for ${uuid}`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\tperipheral.advertisement &&\n\t\t\tperipheral.advertisement.manufacturerData &&\n\t\t\tperipheral.advertisement.manufacturerData.length > 0\n\t\t) {\n\t\t\tconst stateId = `services.manufacturerData`;\n\t\t\t// remember the transmitted data\n\t\t\tret[stateId] = parseData(peripheral.advertisement.manufacturerData);\n\t\t\t_.adapter.log.debug(\n\t\t\t\t`_default: ${peripheral.address} > got manufacturer data ${ret[stateId]}`,\n\t\t\t);\n\t\t}\n\t\treturn ret;\n\t},\n};\n\nexport = plugin;\n"],
  "mappings": "AAAC,oBAA4B;AAU7B,mBAAmB,KAA8B;AAChD,MAAI,IAAI,WAAW,GAAG;AAErB,WAAO,IAAI;AAAA,EACZ,OAAO;AAEN,WAAO,IAAI,SAAS,KAAK;AAAA,EAC1B;AACD;AAEA,MAAM,SAAiB;AAAA,EACtB,MAAM;AAAA,EACN,aACC;AAAA,EAGD,oBAAoB,CAAC;AAAA,EACrB,YAAY,CAAC,OAAO;AAAA,EAGpB,eAAe,CAAC,eAA+B;AAAA,EAE/C,eAAe,CAAC,eAA0D;AACzE,UAAM,eAAuC;AAAA,MAE5C,QAAQ;AAAA,MACR,QAAQ;AAAA,IACT;AAEA,UAAM,YAAY;AAClB,UAAM,gBAAyC;AAAA,MAC9C,IAAI;AAAA,MACJ,QAAQ;AAAA,QAEP,MAAM;AAAA,QACN,MAAM;AAAA,MACP;AAAA,MACA,QAAQ;AAAA,IACT;AAEA,UAAM,eAAwC,CAAC;AAC/C,QAAI,WAAW,iBAAiB,WAAW,cAAc,aAAa;AACrE,iBAAW,SAAS,WAAW,cAAc,aAAa;AACzD,cAAM,OAAO,MAAM;AACnB,cAAM,UAAU,GAAG,aAAa;AAEhC,qBAAa,KAAK;AAAA,UACjB,IAAI;AAAA,UACJ,QAAQ;AAAA,YACP,MAAM;AAAA,YACN,MAAM,wBAAwB;AAAA,YAC9B,MAAM;AAAA,YACN,MAAM;AAAA,YACN,MAAM;AAAA,YACN,OAAO;AAAA,UACR;AAAA,UACA,QAAQ;AAAA,QACT,CAAC;AAAA,MACF;AAAA,IACD;AACA,QACC,WAAW,iBACX,WAAW,cAAc,oBACzB,WAAW,cAAc,iBAAiB,SAAS,GAClD;AACD,mBAAa,KAAK;AAAA,QACjB,IAAI,GAAG;AAAA,QACP,QAAQ;AAAA,UACP,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,QACR;AAAA,QACA,QAAQ;AAAA,MACT,CAAC;AAAA,IACF;AAEA,WAAO;AAAA,MACN,QAAQ;AAAA,MACR,UAAU,CAAC,aAAa;AAAA,MACxB,QAAQ;AAAA,IACT;AAAA,EACD;AAAA,EAEA,WAAW,CAAC,eAA+B;AAC1C,UAAM,MAA2B,CAAC;AAClC,QAAI,WAAW,iBAAiB,WAAW,cAAc,aAAa;AACrE,iBAAW,SAAS,WAAW,cAAc,aAAa;AACzD,cAAM,OAAO,MAAM;AACnB,cAAM,UAAU,YAAY;AAE5B,YAAI,WAAW,UAAU,MAAM,IAAI;AACnC,6BAAE,QAAQ,IAAI,MACb,aAAa,WAAW,sBAAsB,IAAI,gBAAgB,MACnE;AAAA,MACD;AAAA,IACD;AACA,QACC,WAAW,iBACX,WAAW,cAAc,oBACzB,WAAW,cAAc,iBAAiB,SAAS,GAClD;AACD,YAAM,UAAU;AAEhB,UAAI,WAAW,UAAU,WAAW,cAAc,gBAAgB;AAClE,2BAAE,QAAQ,IAAI,MACb,aAAa,WAAW,mCAAmC,IAAI,UAChE;AAAA,IACD;AACA,WAAO;AAAA,EACR;AACD;AAEA,iBAAS;",
  "names": []
}
