{
  "version": 3,
  "sources": ["../../../src/plugins/lib/qingping_protocol.ts"],
  "sourcesContent": ["export class QingpingEvent {\n\ttemperature: number;\n\thumidity: number;\n\tbattery: number;\n\n\tconstructor(temp: number, hum: number, batt: number) {\n\t\tthis.temperature = temp;\n\t\tthis.humidity = hum;\n\t\tthis.battery = batt;\n\t}\n}\ninterface FieldDefinition {\n\tname: string;\n\toffset: number;\n\tlength: number;\n\ttype: string;\n\tscale?: number;\n}\n\ninterface Schema {\n\tfields: FieldDefinition[];\n}\n\nconst fields = [\n\t{ name: \"mac\", offset: 2, length: 6, type: \"mac\" },\n\t{ name: \"temperature\", offset: 10, length: 2, type: \"int16\", scale: 0.1 },\n\t{ name: \"humidity\", offset: 12, length: 2, type: \"uint16\", scale: 0.1 },\n\t{ name: \"battery\", offset: 16, length: 1, type: \"uint8\" },\n];\n\nconst schema: Schema = { fields };\n\nexport class QingpingAdvertisement {\n\tpublic constructor(data: Buffer) {\n\t\tif (!data || data.length < 17) {\n\t\t\tthrow new Error(\n\t\t\t\t\"A Qingping advertisement frame must be at least 17 bytes long\",\n\t\t\t);\n\t\t}\n\t\tconst record = this.decodeMessage(data, schema);\n\t\tif (record.mac) this._macAddress = record.mac;\n\t\tif (record.temperature && record.humidity && record.battery){\n\t\t\tthis._hasEvent = true;\n\t\t\tthis._event = new QingpingEvent(\n\t\t\t\trecord.temperature,\n\t\t\t\trecord.humidity,\n\t\t\t\trecord.battery,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _event: QingpingEvent | undefined;\n\tpublic get event(): QingpingEvent | undefined {\n\t\treturn this._event;\n\t}\n\n\tprivate _hasEvent: boolean = false;\n\tpublic get hasEvent(): boolean {\n\t\treturn this._hasEvent;\n\t}\n\n\tprivate _macAddress: string | undefined;\n\tpublic get macAddress(): string | undefined {\n\t\treturn this._macAddress;\n\t}\n\n\tprivate decodeMessage(buffer: Buffer, schema: Schema): Record<string, any> {\n\t\tconst result: Record<string, any> = {};\n\n\t\tschema.fields.forEach((field) => {\n\t\t\tconst { name, offset, length, type, scale } = field;\n\t\t\tlet value: any;\n\n\t\t\tswitch (type) {\n\t\t\t\tcase \"uint8\":\n\t\t\t\t\tvalue = buffer.readUInt8(offset);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"int16\":\n\t\t\t\t\tvalue = buffer.readInt16LE(offset);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"uint16\":\n\t\t\t\t\tvalue = buffer.readUInt16LE(offset);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"hex\":\n\t\t\t\t\tvalue = buffer\n\t\t\t\t\t\t.slice(offset, offset + length)\n\t\t\t\t\t\t.toString(\"hex\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"mac\":\n\t\t\t\t\tconst macBytes = buffer\n\t\t\t\t\t\t.slice(offset, offset + length)\n\t\t\t\t\t\t.reverse();\n\t\t\t\t\tvalue = Array.from(macBytes)\n\t\t\t\t\t\t.map((byte) => byte.toString(16).padStart(2, \"0\"))\n\t\t\t\t\t\t.join(\":\"); // Format as colon-separated MAC address\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Unsupported field type: ${type}`);\n\t\t\t}\n\n\t\t\tif (scale) {\n\t\t\t\tvalue = Math.round(value * scale * 10) / 10;\n\t\t\t}\n\n\t\t\tresult[name] = value;\n\t\t});\n\n\t\treturn result;\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,MAAM,cAAc;AAAA,EAK1B,YAAY,MAAc,KAAa,MAAc;AACpD,SAAK,cAAc;AACnB,SAAK,WAAW;AAChB,SAAK,UAAU;AAAA,EAChB;AACD;AAaA,MAAM,SAAS;AAAA,EACd,EAAE,MAAM,OAAO,QAAQ,GAAG,QAAQ,GAAG,MAAM,MAAM;AAAA,EACjD,EAAE,MAAM,eAAe,QAAQ,IAAI,QAAQ,GAAG,MAAM,SAAS,OAAO,IAAI;AAAA,EACxE,EAAE,MAAM,YAAY,QAAQ,IAAI,QAAQ,GAAG,MAAM,UAAU,OAAO,IAAI;AAAA,EACtE,EAAE,MAAM,WAAW,QAAQ,IAAI,QAAQ,GAAG,MAAM,QAAQ;AACzD;AAEA,MAAM,SAAiB,EAAE,OAAO;AAEzB,MAAM,sBAAsB;AAAA,EAC3B,YAAY,MAAc;AAuBjC,SAAQ,YAAqB;AAtB5B,QAAI,CAAC,QAAQ,KAAK,SAAS,IAAI;AAC9B,YAAM,IAAI;AAAA,QACT;AAAA,MACD;AAAA,IACD;AACA,UAAM,SAAS,KAAK,cAAc,MAAM,MAAM;AAC9C,QAAI,OAAO;AAAK,WAAK,cAAc,OAAO;AAC1C,QAAI,OAAO,eAAe,OAAO,YAAY,OAAO,SAAQ;AAC3D,WAAK,YAAY;AACjB,WAAK,SAAS,IAAI;AAAA,QACjB,OAAO;AAAA,QACP,OAAO;AAAA,QACP,OAAO;AAAA,MACR;AAAA,IACD;AAAA,EACD;AAAA,EAGA,IAAW,QAAmC;AAC7C,WAAO,KAAK;AAAA,EACb;AAAA,EAGA,IAAW,WAAoB;AAC9B,WAAO,KAAK;AAAA,EACb;AAAA,EAGA,IAAW,aAAiC;AAC3C,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ,cAAc,QAAgBA,SAAqC;AAC1E,UAAM,SAA8B,CAAC;AAErC,IAAAA,QAAO,OAAO,QAAQ,CAAC,UAAU;AAChC,YAAM,EAAE,MAAM,QAAQ,QAAQ,MAAM,MAAM,IAAI;AAC9C,UAAI;AAEJ,cAAQ,MAAM;AAAA,QACb,KAAK;AACJ,kBAAQ,OAAO,UAAU,MAAM;AAC/B;AAAA,QACD,KAAK;AACJ,kBAAQ,OAAO,YAAY,MAAM;AACjC;AAAA,QACD,KAAK;AACJ,kBAAQ,OAAO,aAAa,MAAM;AAClC;AAAA,QACD,KAAK;AACJ,kBAAQ,OACN,MAAM,QAAQ,SAAS,MAAM,EAC7B,SAAS,KAAK;AAChB;AAAA,QACD,KAAK;AACJ,gBAAM,WAAW,OACf,MAAM,QAAQ,SAAS,MAAM,EAC7B,QAAQ;AACV,kBAAQ,MAAM,KAAK,QAAQ,EACzB,IAAI,CAAC,SAAS,KAAK,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,CAAC,EAChD,KAAK,GAAG;AACV;AAAA,QACD;AACC,gBAAM,IAAI,MAAM,2BAA2B,MAAM;AAAA,MACnD;AAEA,UAAI,OAAO;AACV,gBAAQ,KAAK,MAAM,QAAQ,QAAQ,EAAE,IAAI;AAAA,MAC1C;AAEA,aAAO,QAAQ;AAAA,IAChB,CAAC;AAED,WAAO;AAAA,EACR;AACD;",
  "names": ["schema"]
}
