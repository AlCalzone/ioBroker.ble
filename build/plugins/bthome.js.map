{
  "version": 3,
  "sources": ["../../src/plugins/bthome.ts"],
  "sourcesContent": ["import { Global as _ } from \"../lib/global\";\nimport {\n\tBTHomeAdvertisement,\n\ttype BTHomeBinarySensorData,\n\ttype BTHomeEvent,\n\ttype BTHomeMultilevelSensorData,\n\ttype SpecialSensors,\n} from \"./lib/bthome_protocol\";\nimport {\n\tgetServiceData,\n\ttype DeviceObjectDefinition,\n\ttype Plugin,\n\ttype StateObjectDefinition,\n} from \"./plugin\";\n\ninterface BTHomeContext {\n\treadonly packetId?: number;\n\treadonly multilevelSensors: readonly BTHomeMultilevelSensorData[];\n\treadonly binarySensors: readonly BTHomeBinarySensorData[];\n\treadonly specialSensors: readonly SpecialSensors[];\n\treadonly events: readonly BTHomeEvent[];\n}\n\nfunction parseAdvertisement(data: Buffer): BTHomeAdvertisement | undefined {\n\t// try to parse the data\n\tlet advertisement: BTHomeAdvertisement;\n\ttry {\n\t\tadvertisement = new BTHomeAdvertisement(data);\n\t} catch (e) {\n\t\t_.adapter.log.debug(`bthome >> failed to parse data`);\n\t\treturn;\n\t}\n\n\t// succesful - return it\n\treturn advertisement;\n}\n\nconst plugin: Plugin<BTHomeContext> = {\n\tname: \"BTHome\",\n\tdescription: \"BTHome devices\",\n\n\tadvertisedServices: [\"fcd2\"],\n\tisHandling: (p) => {\n\t\treturn p.advertisement?.serviceData?.some(\n\t\t\t(entry) => entry.uuid === \"fcd2\",\n\t\t);\n\t},\n\n\tcreateContext: (peripheral) => {\n\t\tconst data = getServiceData(peripheral, \"fcd2\");\n\t\tif (data == undefined) return;\n\n\t\t_.adapter.log.debug(`bthome >> got data: ${data.toString(\"hex\")}`);\n\n\t\tconst advertisement = parseAdvertisement(data);\n\t\tif (!advertisement) return;\n\n\t\treturn {\n\t\t\tpacketId: advertisement.packetId,\n\t\t\tmultilevelSensors: advertisement.multilevelSensors,\n\t\t\tbinarySensors: advertisement.binarySensors,\n\t\t\tspecialSensors: advertisement.specialSensors,\n\t\t\tevents: advertisement.events,\n\t\t};\n\t},\n\n\tdefineObjects: (context) => {\n\t\tif (context == undefined) return;\n\n\t\tconst deviceObject: DeviceObjectDefinition = {\n\t\t\t// no special definitions neccessary\n\t\t\tcommon: undefined,\n\t\t\tnative: undefined,\n\t\t};\n\n\t\t// no channels\n\n\t\tconst stateObjects: StateObjectDefinition[] = [];\n\n\t\tconst ret = {\n\t\t\tdevice: deviceObject,\n\t\t\tchannels: undefined,\n\t\t\tstates: stateObjects,\n\t\t};\n\n\t\tconst duplicates = new Map<string, number>();\n\n\t\tfor (const ms of context.multilevelSensors) {\n\t\t\tconst id = ms.label.toLowerCase();\n\t\t\tconst count = duplicates.get(id) ?? 0;\n\t\t\tduplicates.set(id, count + 1);\n\n\t\t\tconst stateObject: StateObjectDefinition = {\n\t\t\t\tid: id + (count > 1 ? `_${count + 1}` : \"\"),\n\t\t\t\tcommon: {\n\t\t\t\t\tname: ms.label + (count > 1 ? ` (${count + 1})` : \"\"),\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: false,\n\t\t\t\t\ttype: \"number\",\n\t\t\t\t\trole: \"value\",\n\t\t\t\t\tunit: ms.unit,\n\t\t\t\t},\n\t\t\t\tnative: undefined,\n\t\t\t};\n\t\t\tstateObjects.push(stateObject);\n\t\t}\n\n\t\tfor (const bs of context.binarySensors) {\n\t\t\tconst id = bs.label.toLowerCase();\n\t\t\tconst count = duplicates.get(id) ?? 0;\n\t\t\tduplicates.set(id, count + 1);\n\n\t\t\tconst stateObject: StateObjectDefinition = {\n\t\t\t\tid: id + (count > 1 ? `_${count + 1}` : \"\"),\n\t\t\t\tcommon: {\n\t\t\t\t\tname: bs.label + (count > 1 ? ` (${count + 1})` : \"\"),\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: false,\n\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\trole: \"indicator\",\n\t\t\t\t\tstates: bs.states,\n\t\t\t\t},\n\t\t\t\tnative: undefined,\n\t\t\t};\n\t\t\tstateObjects.push(stateObject);\n\t\t}\n\n\t\t// TODO: Events and special sensors\n\n\t\treturn ret;\n\t},\n\n\tgetValues: (context) => {\n\t\tif (context == undefined) return;\n\n\t\tconst duplicates = new Map<string, number>();\n\t\tconst ret: Record<string, any> = {};\n\n\t\tfor (const ms of context.multilevelSensors) {\n\t\t\tconst id = ms.label.toLowerCase();\n\t\t\tconst count = duplicates.get(id) ?? 0;\n\t\t\tduplicates.set(id, count + 1);\n\n\t\t\tconst stateId = id + (count > 1 ? `_${count + 1}` : \"\");\n\t\t\tret[stateId] = ms.value;\n\t\t}\n\n\t\tfor (const bs of context.binarySensors) {\n\t\t\tconst id = bs.label.toLowerCase();\n\t\t\tconst count = duplicates.get(id) ?? 0;\n\t\t\tduplicates.set(id, count + 1);\n\n\t\t\tconst stateId = id + (count > 1 ? `_${count + 1}` : \"\");\n\t\t\tret[stateId] = bs.value;\n\t\t}\n\n\t\t// TODO: Events and special sensors\n\n\t\treturn ret;\n\t},\n};\n\nexport = plugin as Plugin;\n"],
  "mappings": "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",
  "names": ["_"]
}
