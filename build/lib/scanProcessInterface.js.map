{
  "version": 3,
  "sources": ["../../src/lib/scanProcessInterface.ts"],
  "sourcesContent": ["import type { Peripheral } from \"@abandonware/noble\";\nimport { isArray, isObject } from \"alcalzone-shared/typeguards\";\n\nexport enum ScanExitCodes {\n\tRequireNobleFailed = 1,\n}\n\nexport type InboundMessage =\n\t| {\n\t\t\ttype: \"startScanning\";\n\t  }\n\t| {\n\t\t\ttype: \"stopScanning\";\n\t  };\n\nexport type ScanMessage =\n\t| {\n\t\t\ttype: \"error\";\n\t\t\terror: Error;\n\t  }\n\t| {\n\t\t\ttype: \"fatal\";\n\t\t\terror: Error;\n\t  }\n\t| {\n\t\t\ttype: \"connected\";\n\t  }\n\t| {\n\t\t\ttype: \"disconnected\";\n\t  }\n\t| {\n\t\t\ttype: \"driverState\";\n\t\t\tdriverState: string;\n\t  }\n\t| {\n\t\t\ttype: \"log\";\n\t\t\tmessage: string;\n\t\t\tlevel?: ioBroker.LogLevel;\n\t  }\n\t| {\n\t\t\ttype: \"discover\";\n\t\t\tperipheral: PeripheralInfo;\n\t  };\n\nexport type PeripheralInfo = Pick<\n\tPeripheral,\n\t| \"id\"\n\t| \"uuid\"\n\t| \"address\"\n\t| \"addressType\"\n\t| \"connectable\"\n\t| \"advertisement\"\n\t| \"rssi\"\n\t| \"services\"\n\t| \"state\"\n>;\n\nexport function getMessageReviver<T extends Record<string, any>>(\n\tcallback: (message: T) => void,\n): (input: Record<string, any>) => void {\n\tconst reviveValue = (value: any): any => {\n\t\tif (isArray(value)) {\n\t\t\treturn value.map((v: any) => reviveValue(v));\n\t\t} else if (isObject(value)) {\n\t\t\tconst v = value as any;\n\t\t\tif (v.type === \"Buffer\" && isArray(v.data)) {\n\t\t\t\treturn Buffer.from(v.data);\n\t\t\t} else if (\n\t\t\t\tv.type === \"Error\" &&\n\t\t\t\ttypeof v.name === \"string\" &&\n\t\t\t\ttypeof v.message === \"string\"\n\t\t\t) {\n\t\t\t\tconst ret = new Error(v.message);\n\t\t\t\tret.name = v.name;\n\t\t\t\tret.stack = v.stack;\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-use-before-define\n\t\t\treturn reviveObject(value);\n\t\t} else {\n\t\t\treturn value;\n\t\t}\n\t};\n\tconst reviveObject = (input: Record<string, any>): Record<string, any> => {\n\t\tconst ret: Record<string, any> = {};\n\t\tfor (const [key, value] of Object.entries(input)) {\n\t\t\tret[key] = reviveValue(value);\n\t\t}\n\t\treturn ret;\n\t};\n\n\treturn (input) => {\n\t\tcallback(reviveObject(input) as T);\n\t};\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAAkC;AAE3B,IAAK,gBAAL,kBAAKA,mBAAL;AACN,EAAAA,8BAAA,wBAAqB,KAArB;AADW,SAAAA;AAAA,GAAA;AAsDL,SAAS,kBACf,UACuC;AACvC,QAAM,cAAc,CAAC,UAAoB;AACxC,YAAI,2BAAQ,KAAK,GAAG;AACnB,aAAO,MAAM,IAAI,CAAC,MAAW,YAAY,CAAC,CAAC;AAAA,IAC5C,eAAW,4BAAS,KAAK,GAAG;AAC3B,YAAM,IAAI;AACV,UAAI,EAAE,SAAS,gBAAY,2BAAQ,EAAE,IAAI,GAAG;AAC3C,eAAO,OAAO,KAAK,EAAE,IAAI;AAAA,MAC1B,WACC,EAAE,SAAS,WACX,OAAO,EAAE,SAAS,YAClB,OAAO,EAAE,YAAY,UACpB;AACD,cAAM,MAAM,IAAI,MAAM,EAAE,OAAO;AAC/B,YAAI,OAAO,EAAE;AACb,YAAI,QAAQ,EAAE;AACd,eAAO;AAAA,MACR;AAEA,aAAO,aAAa,KAAK;AAAA,IAC1B,OAAO;AACN,aAAO;AAAA,IACR;AAAA,EACD;AACA,QAAM,eAAe,CAAC,UAAoD;AACzE,UAAM,MAA2B,CAAC;AAClC,eAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,KAAK,GAAG;AACjD,UAAI,OAAO,YAAY,KAAK;AAAA,IAC7B;AACA,WAAO;AAAA,EACR;AAEA,SAAO,CAAC,UAAU;AACjB,aAAS,aAAa,KAAK,CAAM;AAAA,EAClC;AACD;",
  "names": ["ScanExitCodes"]
}
