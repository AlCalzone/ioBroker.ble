{
  "version": 3,
  "sources": ["../../src/lib/object-cache.ts"],
  "sourcesContent": ["import type { CompareResult } from \"alcalzone-shared/comparable\";\nimport { extend } from \"alcalzone-shared/objects\";\nimport { SortedList } from \"alcalzone-shared/sorted-list\";\nimport { Global as _ } from \"./global\";\n\ninterface ExpireTimestamp {\n\ttimestamp: number;\n\tid: string;\n}\nfunction compareExpireTimestamp(\n\ta: ExpireTimestamp,\n\tb: ExpireTimestamp,\n): CompareResult {\n\treturn Math.sign(b.timestamp - a.timestamp) as CompareResult;\n}\n\nexport class ObjectCache {\n\t/**\n\t * @param expiryDuration The timespan after which cached objects are expired automatically\n\t */\n\tconstructor(private expiryDuration: number | false = false) {}\n\n\tprivate cache = new Map<string, ioBroker.Object>();\n\tprivate expireTimestamps = new SortedList<ExpireTimestamp>(\n\t\tundefined,\n\t\tcompareExpireTimestamp,\n\t);\n\tprivate expireTimer: NodeJS.Timeout | undefined;\n\n\t/**\n\t * Retrieves an object from the cache or queries the database if it is not cached yet\n\t * @param id The id of the object to retrieve\n\t */\n\tpublic async getObject(id: string): Promise<ioBroker.Object | undefined> {\n\t\tif (!this.cache.has(id)) {\n\t\t\t// retrieve the original object from the DB\n\t\t\tconst ret = await _.adapter.getForeignObjectAsync(id);\n\t\t\t// and remember it in the cache\n\t\t\tif (ret != null) this.storeObject(ret);\n\t\t}\n\t\treturn this.retrieveObject(id);\n\t}\n\n\tpublic async objectExists(id: string): Promise<boolean> {\n\t\tif (this.cache.has(id)) return true;\n\t\t// Try to retrieve the original object from the DB\n\t\tconst ret = await _.adapter.getForeignObjectAsync(id);\n\t\treturn ret != undefined;\n\t}\n\n\tprivate storeObject(obj: ioBroker.Object) {\n\t\tconst clone = extend({}, obj) as ioBroker.Object;\n\t\tthis.cache.set(clone._id, clone);\n\t\tthis.rememberForExpiry(clone._id);\n\t}\n\n\tprivate retrieveObject(id: string): ioBroker.Object | undefined {\n\t\tif (this.cache.has(id)) {\n\t\t\treturn extend({}, this.cache.get(id)!) as ioBroker.Object;\n\t\t}\n\t}\n\n\tprivate rememberForExpiry(id: string) {\n\t\tif (typeof this.expiryDuration !== \"number\") return;\n\n\t\tconst existingTimestamp = [...this.expireTimestamps].find(\n\t\t\t(ets) => ets.id === id,\n\t\t);\n\t\tif (existingTimestamp != null) {\n\t\t\tthis.expireTimestamps.remove(existingTimestamp);\n\t\t}\n\t\tconst newTimestamp: ExpireTimestamp = {\n\t\t\ttimestamp: Date.now() + this.expiryDuration,\n\t\t\tid,\n\t\t};\n\t\tthis.expireTimestamps.add(newTimestamp);\n\t\t// if no expiry timer is running, start one\n\t\tif (this.expireTimer == null) {\n\t\t\tthis.expireTimer = setTimeout(\n\t\t\t\t() => this.expire(),\n\t\t\t\tthis.expiryDuration,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate expire() {\n\t\tthis.expireTimer = undefined;\n\t\tif (this.expireTimestamps.length === 0) return;\n\n\t\tconst nextTimestamp = this.expireTimestamps.peekStart()!;\n\t\tconst timeDelta = nextTimestamp.timestamp - Date.now();\n\t\tif (timeDelta <= 0) {\n\t\t\t// it has expired\n\t\t\tthis.invalidateObject(nextTimestamp.id);\n\t\t\tthis.expireTimestamps.remove(nextTimestamp);\n\t\t}\n\t\tthis.setTimerForNextExpiry();\n\t}\n\n\tprivate setTimerForNextExpiry() {\n\t\tif (this.expireTimestamps.length === 0) return;\n\n\t\tconst nextTimestamp = this.expireTimestamps.peekStart()!;\n\t\tconst timeDelta = nextTimestamp.timestamp - Date.now();\n\t\tthis.expireTimer = setTimeout(\n\t\t\t() => this.expire(),\n\t\t\tMath.max(timeDelta, 100),\n\t\t);\n\t}\n\n\t/**\n\t * Causes the cache for an object to be invalidated\n\t * @param id The id of the object to invalidate\n\t */\n\tpublic invalidateObject(id: string): void {\n\t\tthis.cache.delete(id);\n\t}\n\n\t/**\n\t * Updates an object in the cache\n\t * @param id The id of the object to update\n\t * @param obj The updated object\n\t */\n\tpublic updateObject(obj: ioBroker.Object): void {\n\t\tthis.storeObject(obj);\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this.expireTimer != undefined) {\n\t\t\tclearTimeout(this.expireTimer);\n\t\t\tthis.expireTimer = undefined;\n\t\t}\n\t\tthis.cache.clear();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,qBAAuB;AACvB,yBAA2B;AAC3B,oBAA4B;AAM5B,SAAS,uBACR,GACA,GACgB;AAChB,SAAO,KAAK,KAAK,EAAE,YAAY,EAAE,SAAS;AAC3C;AAEO,MAAM,YAAY;AAAA,EAIxB,YAAoB,iBAAiC,OAAO;AAAxC;AAEpB,SAAQ,QAAQ,oBAAI,IAA6B;AACjD,SAAQ,mBAAmB,IAAI;AAAA,MAC9B;AAAA,MACA;AAAA,IACD;AAAA,EAN6D;AAAA,EAa7D,MAAa,UAAU,IAAkD;AACxE,QAAI,CAAC,KAAK,MAAM,IAAI,EAAE,GAAG;AAExB,YAAM,MAAM,MAAM,cAAAA,OAAE,QAAQ,sBAAsB,EAAE;AAEpD,UAAI,OAAO;AAAM,aAAK,YAAY,GAAG;AAAA,IACtC;AACA,WAAO,KAAK,eAAe,EAAE;AAAA,EAC9B;AAAA,EAEA,MAAa,aAAa,IAA8B;AACvD,QAAI,KAAK,MAAM,IAAI,EAAE;AAAG,aAAO;AAE/B,UAAM,MAAM,MAAM,cAAAA,OAAE,QAAQ,sBAAsB,EAAE;AACpD,WAAO,OAAO;AAAA,EACf;AAAA,EAEQ,YAAY,KAAsB;AACzC,UAAM,YAAQ,uBAAO,CAAC,GAAG,GAAG;AAC5B,SAAK,MAAM,IAAI,MAAM,KAAK,KAAK;AAC/B,SAAK,kBAAkB,MAAM,GAAG;AAAA,EACjC;AAAA,EAEQ,eAAe,IAAyC;AAC/D,QAAI,KAAK,MAAM,IAAI,EAAE,GAAG;AACvB,iBAAO,uBAAO,CAAC,GAAG,KAAK,MAAM,IAAI,EAAE,CAAE;AAAA,IACtC;AAAA,EACD;AAAA,EAEQ,kBAAkB,IAAY;AACrC,QAAI,OAAO,KAAK,mBAAmB;AAAU;AAE7C,UAAM,oBAAoB,CAAC,GAAG,KAAK,gBAAgB,EAAE;AAAA,MACpD,CAAC,QAAQ,IAAI,OAAO;AAAA,IACrB;AACA,QAAI,qBAAqB,MAAM;AAC9B,WAAK,iBAAiB,OAAO,iBAAiB;AAAA,IAC/C;AACA,UAAM,eAAgC;AAAA,MACrC,WAAW,KAAK,IAAI,IAAI,KAAK;AAAA,MAC7B;AAAA,IACD;AACA,SAAK,iBAAiB,IAAI,YAAY;AAEtC,QAAI,KAAK,eAAe,MAAM;AAC7B,WAAK,cAAc;AAAA,QAClB,MAAM,KAAK,OAAO;AAAA,QAClB,KAAK;AAAA,MACN;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,SAAS;AAChB,SAAK,cAAc;AACnB,QAAI,KAAK,iBAAiB,WAAW;AAAG;AAExC,UAAM,gBAAgB,KAAK,iBAAiB,UAAU;AACtD,UAAM,YAAY,cAAc,YAAY,KAAK,IAAI;AACrD,QAAI,aAAa,GAAG;AAEnB,WAAK,iBAAiB,cAAc,EAAE;AACtC,WAAK,iBAAiB,OAAO,aAAa;AAAA,IAC3C;AACA,SAAK,sBAAsB;AAAA,EAC5B;AAAA,EAEQ,wBAAwB;AAC/B,QAAI,KAAK,iBAAiB,WAAW;AAAG;AAExC,UAAM,gBAAgB,KAAK,iBAAiB,UAAU;AACtD,UAAM,YAAY,cAAc,YAAY,KAAK,IAAI;AACrD,SAAK,cAAc;AAAA,MAClB,MAAM,KAAK,OAAO;AAAA,MAClB,KAAK,IAAI,WAAW,GAAG;AAAA,IACxB;AAAA,EACD;AAAA,EAMO,iBAAiB,IAAkB;AACzC,SAAK,MAAM,OAAO,EAAE;AAAA,EACrB;AAAA,EAOO,aAAa,KAA4B;AAC/C,SAAK,YAAY,GAAG;AAAA,EACrB;AAAA,EAEO,UAAgB;AACtB,QAAI,KAAK,eAAe,QAAW;AAClC,mBAAa,KAAK,WAAW;AAC7B,WAAK,cAAc;AAAA,IACpB;AACA,SAAK,MAAM,MAAM;AAAA,EAClB;AACD;",
  "names": ["_"]
}
